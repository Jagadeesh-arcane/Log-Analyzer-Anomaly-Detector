# .gitlab-ci.yml

stages:
  - lint
  - setup
  - backend
  - infra-plan
  - infra-apply
  - build-image
  - deploy
  - destroy

variables:
  ALERT_EMAIL_TO: "${ALERT_EMAIL_TO}"
  AWS_ACCESS_KEY_ID: "${AWS_ACCESS_KEY_ID}"
  AWS_ACCOUNT_ID: "${AWS_ACCOUNT_ID}"
  AWS_REGION: "${AWS_REGION}"
  AWS_SECRET_ACCESS_KEY: "${AWS_SECRET_ACCESS_KEY}"
  EMAIL_HOST: "${EMAIL_HOST}"
  EMAIL_PASSWORD: "${EMAIL_PASSWORD}"
  EMAIL_PORT: "${EMAIL_PORT}"
  EMAIL_USER: "${EMAIL_USER}"
  LOG_FILE_PATH: "${LOG_FILE_PATH}"
  PROJECT_NAME: "${PROJECT_NAME}"
  RESPONSE_TIME_THRESHOLD: "${RESPONSE_TIME_THRESHOLD}"
  SENDER_NAME: "${SENDER_NAME}"
  STREAMLIT_PORT: "${STREAMLIT_PORT}"
  TF_STATE_BUCKET: "${TF_STATE_BUCKET}"
  TF_STATE_KEY: "${TF_STATE_KEY}"
  TF_STATE_LOCK_TABLE: "${TF_STATE_LOCK_TABLE}"
  TF_CLI_ARGS: "-no-color"
  IMAGE_TAG: "${CI_COMMIT_SHORT_SHA}"

.default_before_script: &default_before_script
  - set -e
  - apt-get update && apt-get install -y curl unzip groff less git
  - echo "Installing AWS CLI..."
  - curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  - unzip -q awscliv2.zip
  - ./aws/install
  - aws --version
  - echo "Installing Terraform..."
  - mkdir -p /tmp/terraform-install && cd /tmp/terraform-install
  - curl -s -L https://releases.hashicorp.com/terraform/1.9.5/terraform_1.9.5_linux_amd64.zip -o terraform.zip
  - unzip -qo terraform.zip
  - mv /tmp/terraform-install/terraform /usr/local/bin/
  - terraform version
  - cd $CI_PROJECT_DIR


# ---------------------------------------
# Lint / Validate Terraform
# ---------------------------------------
lint:
  stage: lint
  image: python:3.11-slim
  before_script:
    - set -e
    - apt-get update && apt-get install -y curl unzip git
    - echo "Installing Terraform..."
    - mkdir -p /tmp/terraform-install && cd /tmp/terraform-install
    - curl -s -L https://releases.hashicorp.com/terraform/1.9.5/terraform_1.9.5_linux_amd64.zip -o terraform.zip
    - unzip -qo terraform.zip
    - mv /tmp/terraform-install/terraform /usr/local/bin/
    - terraform version
    - cd $CI_PROJECT_DIR
  script:
    - cd terraform
    - terraform init -backend=false
    - terraform fmt -check
    - terraform validate

# ---------------------------------------
# Resource Creation For State Storage 
# ---------------------------------------
setup:
  stage: setup
  image: python:3.11-slim
  before_script: *default_before_script 
  script:
    - echo "Creating S3 bucket if it doesn't exist..."
    - |
      if ! aws s3api head-bucket --bucket "${TF_STATE_BUCKET}" 2>/dev/null; then
        aws s3 mb "s3://${TF_STATE_BUCKET}" --region "${AWS_REGION}"
      else
        echo "Bucket already exists."
      fi

    - echo "Creating DynamoDB table if it doesn't exist..."
    - |
      if ! aws dynamodb describe-table --table-name "${TF_STATE_LOCK_TABLE}" --region "${AWS_REGION}" 2>/dev/null; then
        aws dynamodb create-table \
          --table-name "${TF_STATE_LOCK_TABLE}" \
          --attribute-definitions AttributeName=LockID,AttributeType=S \
          --key-schema AttributeName=LockID,KeyType=HASH \
          --billing-mode PAY_PER_REQUEST \
          --region "${AWS_REGION}"
      else
        echo "DynamoDB table already exists."
      fi

# ---------------------------------------
# Terraform Backend Initialization
# ---------------------------------------
.backend:
  stage: backend
  image: python:3.11-slim
  before_script: *default_before_script
  script:
    - cd terraform
    - terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${TF_STATE_LOCK_TABLE}"
  only:
    - main

# ---------------------------------------
# Terraform Plan
# ---------------------------------------
infra-plan:
  stage: infra-plan
  image: python:3.11-slim
  before_script: *default_before_script
  script:
    - cd terraform
    - terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${TF_STATE_LOCK_TABLE}"
    - terraform plan -var="aws_region=${AWS_REGION}" -var="aws_account_id=${AWS_ACCOUNT_ID}" -var="aws_access_key_id=${AWS_ACCESS_KEY_ID}" -var="aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" -var="email_user=${EMAIL_USER}" -var="email_password=${EMAIL_PASSWORD}" -var="email_host=${EMAIL_HOST}" -var="email_port=${EMAIL_PORT}" -var="alert_email_to=${ALERT_EMAIL_TO}" -var="log_file_path=${LOG_FILE_PATH}" -var="sender_name=${SENDER_NAME}" -var="response_time_threshold=${RESPONSE_TIME_THRESHOLD}" -var="streamlit_port=${STREAMLIT_PORT}" -var="image_tag=${IMAGE_TAG}" -out=tfplan
  only:
    - main
  artifacts:
    paths:
      - terraform/tfplan

# ---------------------------------------
# Terraform Apply
# ---------------------------------------
infra-apply:
  stage: infra-apply
  image: python:3.11-slim
  dependencies:
    - infra-plan
  before_script: *default_before_script
  script:
    - cd terraform
    - terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${TF_STATE_LOCK_TABLE}"
    - terraform apply -auto-approve tfplan
  only:
    - main

# ---------------------------------------
# Docker Image Build & Push to ECR
# ---------------------------------------
build-image:
  stage: build-image
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_DRIVER: overlay2
  before_script:
    - apk add --no-cache python3 py3-pip curl jq
    - pip install awscli
    - aws --version
  script:
    - export ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}-repo"
    - aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
    - docker build -t ${PROJECT_NAME}:${IMAGE_TAG} .
    - docker tag ${PROJECT_NAME}:${IMAGE_TAG} ${ECR_REPO}:${IMAGE_TAG}
    - docker push ${ECR_REPO}:${IMAGE_TAG}
  only:
    - main
  # rules:
  #   - if: $CI_COMMIT_BRANCH
  #     changes:
  #       - Dockerfile
  #       - dashboard/**
  #       - src/**
  #       - requirements.txt

# ---------------------------------------
# Deploy Application (ECS service update)
# ---------------------------------------
deploy:
  stage: deploy
  image: python:3.11-slim
  needs:
    - build-image
  before_script: *default_before_script
  script:
    - echo "Starting deployment..."
    - ECR_REPO="${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${PROJECT_NAME}"
    - aws ecs update-service --cluster ${PROJECT_NAME}-cluster --service ${PROJECT_NAME}-service --force-new-deployment --region ${AWS_REGION}
    - echo "Fetching web app URL..."
    - terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${TF_STATE_LOCK_TABLE}"
    - terraform output -raw web_app_url
  only:
    - main

# ---------------------------------------
# Terraform Destroy
# ---------------------------------------
destroy:
  stage: destroy
  image: python:3.11-slim
  when: manual
  before_script: *default_before_script
  script:
    - cd terraform
    - terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${TF_STATE_LOCK_TABLE}"
    - terraform destroy -auto-approve -var="aws_region=${AWS_REGION}" -var="aws_account_id=${AWS_ACCOUNT_ID}" -var="aws_access_key_id=${AWS_ACCESS_KEY_ID}" -var="aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" -var="email_user=${EMAIL_USER}" -var="email_password=${EMAIL_PASSWORD}" -var="email_host=${EMAIL_HOST}" -var="email_port=${EMAIL_PORT}" -var="alert_email_to=${ALERT_EMAIL_TO}" -var="log_file_path=${LOG_FILE_PATH}" -var="sender_name=${SENDER_NAME}" -var="response_time_threshold=${RESPONSE_TIME_THRESHOLD}" -var="streamlit_port=${STREAMLIT_PORT}" -var="image_tag=${IMAGE_TAG}"
    - echo "Force deleting S3 bucket and all contents..."
    - |
      if aws s3api head-bucket --bucket "${TF_STATE_BUCKET}" 2>/dev/null; then

        echo "Deleting all object versions (if any)..."
        VERSIONS=$(aws s3api list-object-versions --bucket "${TF_STATE_BUCKET}" --query='{Objects: Versions[].{Key:Key,VersionId:VersionId}}' --output=json)
        if [ "$VERSIONS" != "[]" ]; then
          echo "$VERSIONS" > delete.json
          aws s3api delete-objects --bucket "${TF_STATE_BUCKET}" --delete file://delete.json
        fi

        echo "Deleting all delete markers (if any)..."
        MARKERS=$(aws s3api list-object-versions --bucket "${TF_STATE_BUCKET}" --query='{Objects: DeleteMarkers[].{Key:Key,VersionId:VersionId}}' --output=json)
        if [ "$MARKERS" != "[]" ]; then
          echo "$MARKERS" > delete-markers.json
          aws s3api delete-objects --bucket "${TF_STATE_BUCKET}" --delete file://delete-markers.json
        fi

        echo "Deleting remaining objects (if any)..."
        aws s3 rm "s3://${TF_STATE_BUCKET}" --recursive

        echo "Deleting the bucket..."
        aws s3api delete-bucket --bucket "${TF_STATE_BUCKET}" --region "${AWS_REGION}"

        echo "S3 bucket deleted successfully."
      else
        echo "S3 bucket does not exist or already deleted."
      fi

    - echo "Deleting DynamoDB table..."
    - |
      if aws dynamodb describe-table --table-name "${TF_STATE_LOCK_TABLE}" --region "${AWS_REGION}" 2>/dev/null; then
        aws dynamodb delete-table --table-name "${TF_STATE_LOCK_TABLE}" --region "${AWS_REGION}"
        echo "DynamoDB table deleted."
      else
        echo "DynamoDB table does not exist or already deleted."
      fi
