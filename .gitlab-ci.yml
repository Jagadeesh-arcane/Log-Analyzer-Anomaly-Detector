# .gitlab-ci.yml
stages:
  - backend
  - build
  - deploy
  - destroy

variables:
  TF_STATE_BUCKET: "terraform-state-bucket"  
  TF_STATE_LOCK_TABLE: "terraform-locks"
  TF_STATE_KEY: "${CI_PROJECT_NAME}/terraform.tfstate"
  IMAGE_TAG: "latest"
  AWS_REGION: "us-east-1"
  ECR_REPOSITORY: $ECR_REPOSITORY
  PROJECT_DIR: $CI_PROJECT_DIR
  APP_NAME: $CI_PROJECT_NAME
  STREAMLIT_PORT: "8501"

# Use correct package manager depending on base image
.default_before_script_al2: &default_before_script_al2 
  - yum install -y bash curl jq python3 python3-pip unzip git
  - pip3 install --upgrade awscli

.default_before_script_docker: &default_before_script_docker 
  - apk add --no-cache bash curl jq python3 py3-pip unzip git
  - pip3 install --upgrade awscli

backend_setup:
  stage: backend
  image: amazonlinux:2
  before_script:
    - *default_before_script_al2
  script:
    - chmod +x scripts/setup_backend.sh
    - ./scripts/setup_backend.sh
  rules:
    - when: manual

build_and_push:
  stage: build
  image: docker:24.0.2
  services:
    - docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - *default_before_script
  script:
    - echo "Logging into AWS ECR..."
    - aws --version
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_REGION
    - export ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    - export ECR_REGISTRY="${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com"
    - export IMAGE_NAME="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${ECR_REGISTRY}
    - echo "Ensuring ECR repository exists..."
    - aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY
    - docker build -t ${IMAGE_NAME} .
    - docker push ${IMAGE_NAME}
  only:
    - main

terraform_deploy:
  stage: deploy
  image: 
    name: hashicorp/terraform:1.5.0
    entrypoint: [""]
  before_script:
    - *default_before_script_docker
  script:
    - cd terraform
    - terraform init -backend-config="bucket=${TF_STATE_BUCKET}" -backend-config="key=${TF_STATE_KEY}" -backend-config="region=${AWS_REGION}" -backend-config="dynamodb_table=${TF_STATE_LOCK_TABLE}"
    - terraform apply -auto-approve -var "aws_region=${AWS_REGION}" -var "app_name=${APP_NAME}" -var "streamlit_port=${STREAMLIT_PORT}"
  only:
    - main

terraform_destroy:
  stage: destroy
  image:
    name: hashicorp/terraform:1.5.0
    entrypoint: [""]
  before_script:
    - *default_before_script_docker
  script:
    - chmod +x scripts/destroy_all.sh
    - ./scripts/destroy_all.sh
  when: manual  # make this manual/protected to avoid accidental run
  only:
    - main
